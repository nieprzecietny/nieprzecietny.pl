@page "/{name}"

@inject HttpClient Http

@if (linkPage is null)
{
    <p>Page not found.</p>
}
else
{
    <div class="banner" style="background-image:url(@linkPage.BannerUrl);"></div>
    <div class="profile">
        <img class="avatar" src="@linkPage.AvatarUrl" alt="avatar" />
        <h1>@linkPage.Title</h1>
        <div class="social">
            @foreach (var s in linkPage.SocialLinks)
            {
                <MatIconButton Icon="@s.Icon" Link="@s.Url" Target="_blank" Class="social-button">
                    @s.Text
                </MatIconButton>
            }
        </div>
    </div>
    <div class="links">
        @foreach (var l in linkPage.Links)
        {
            <MatAnchorLink href="@l.Url" target="_blank" class="link-item">
                <MatButton Icon="@l.Icon" Label="@l.Text" Class="link-button" />
            </MatAnchorLink>
        }
    </div>
    <footer>@linkPage.FooterText</footer>
}

@code {
    [Parameter] public string? Name { get; set; }
    LinkPage? linkPage;

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(Name))
        {
            try
            {
                linkPage = await Http.GetFromJsonAsync<LinkPage>($"api/pages/{Name}");
            }
            catch
            {
                linkPage = null;
            }
        }
    }
}
